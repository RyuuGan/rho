#!/usr/bin/env node

var fs = require("fs");

var opts = require("nomnom")
  .option('input', {
    abbr: 'i',
    help: "source text file to process"
  })
  .option('output', {
    abbr: 'o',
    help: "output HTML file"
  })
  .option('stats', {
    flag: true,
    help: "print some statistics (document length, time taken)"
  })
  .option('inline', {
    flag: true,
    help: "inline compilation only (do not process blocks)"
  })
  .parse();

var compiler = null;
if (opts.inline) compiler = require("../lib/inline");
else compiler = require("../lib/block");

return readData(function(err, data) {
  var startTime = process.hrtime();
  var result = new compiler().compile(data);
  var timeTaken = process.hrtime(startTime);
  if (opts.output)
    fs.writeFile(opts.output, result, over);
  else process.stdout.write(result, over);
  function over(err) {
    if (opts.stats) {
      var time = (timeTaken[1] * 1e-6).toString() + " ms";
      if (timeTaken[0] > 1)
        time = timeTaken[0].toString() + " s " + time;
      process.stderr.write("Input:\t\t" + data.length + " chars\n");
      process.stderr.write("Output:\t\t" + result.length + " chars\n");
      process.stderr.write("Time:\t\t" + time + "\n");
    }
    mainCallback(err);
  }
});

function mainCallback(err) {
  if (err) process.exit(1);
  else process.exit(0);
}

function readData(callback) {
  if (opts.input)
    fs.readFile(opts.input, "utf-8", callback);
  else readStdin(callback);
}

function readStdin(callback) {
  var stdin = process.stdin;
  var buff = '';

  stdin.setEncoding('utf-8');

  stdin.on('data', function(data) {
    buff += data;
  });

  stdin.on('error', function(err) {
    return callback(err);
  });

  stdin.on('end', function() {
    return callback(null, buff);
  });

  try {
    stdin.resume();
  } catch (e) {
    callback(e);
  }
}
